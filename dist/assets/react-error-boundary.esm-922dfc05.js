import{a}from"./react-c99c05cb.js";const h=a.createContext(null),c={didCatch:!1,error:null};class E extends a.Component{constructor(r){super(r),this.resetErrorBoundary=this.resetErrorBoundary.bind(this),this.state=c}static getDerivedStateFromError(r){return{didCatch:!0,error:r}}resetErrorBoundary(...r){var e,t;const{error:o}=this.state;o!==null&&((t=(e=this.props).onReset)==null||t.call(e,{args:r,reason:"imperative-api"}),this.setState(c))}componentDidCatch(r,o){var e,t;(t=(e=this.props).onError)==null||t.call(e,r,o)}componentDidUpdate(r,o){var s,n;const{didCatch:e}=this.state,{resetKeys:t}=this.props;e&&o.error!==null&&p(r.resetKeys,t)&&((n=(s=this.props).onReset)==null||n.call(s,{next:t,prev:r.resetKeys,reason:"keys"}),this.setState(c))}render(){const{children:r,fallbackRender:o,FallbackComponent:e,fallback:t}=this.props,{didCatch:s,error:n}=this.state;let i=r;if(s){const d={error:n,resetErrorBoundary:this.resetErrorBoundary};if(a.isValidElement(t))i=t;else if(typeof o=="function")i=o(d);else if(e)i=a.createElement(e,d);else throw new Error("react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop")}return a.createElement(h.Provider,{value:{didCatch:s,error:n,resetErrorBoundary:this.resetErrorBoundary}},i)}}function p(l=[],r=[]){return l.length!==r.length||l.some((o,e)=>!Object.is(o,r[e]))}export{E};
